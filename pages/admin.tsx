import type { NextPage } from "next";
import Head from "next/head";
import {
  addDoc,
  setDoc,
  doc,
  query,
  where,
  deleteDoc,
} from "firebase/firestore";
import { firestore, priceCollection, roomCollection } from "../shared/fb";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import {
  DATE_FORMAT,
  getDayList,
  multiplierToColor,
  PriceAdjust,
  Room,
  snakeToCamel,
} from "../shared";
import dayjs from "dayjs";

import {
  useCollection,
  useCollectionData,
} from "react-firebase-hooks/firestore";
import { useState } from "react";

const Home: NextPage = () => {
  const [rooms] = useCollectionData(roomCollection);
  const [currentPriceMultiplier, setCurrentPriceMultipler] = useState(100); // 100%
  const [currentRoomIndex, setCurrentRoomIndex] = useState(0);

  const [priceDocs] = useCollection(
    query(
      priceCollection,
      where("roomType", "==", rooms ? rooms[currentRoomIndex].name : "")
    )
  );

  const [startDate, setStartDate] = useState<Date | null>(new Date());
  const [endDate, setEndDate] = useState<Date | null>(new Date());

  const clearAll = () => {
    const prices = priceDocs?.docs ?? [];
    prices.forEach(async (price) => {
      await deleteDoc(doc(firestore, "priceAdjust", price.id));
    });
  };
  const clear = async () => {
    if (!startDate || !endDate || !rooms) {
      return;
    }
    const days: string[] = getDayList(startDate, endDate);
    const prices = priceDocs?.docs ?? [];
    days.forEach(async (day) => {
      for (const price of prices) {
        const p = price.data() as PriceAdjust;
        if (p.day === day) {
          await deleteDoc(doc(firestore, "priceAdjust", price.id));
          return;
        }
      }
    });
  };
  const adjustPrice = async () => {
    if (!rooms || !startDate || !endDate || currentPriceMultiplier === 1) {
      // show fail message
      return;
    }
    const days: string[] = getDayList(startDate, endDate);
    const prices = priceDocs?.docs ?? [];

    days.forEach(async (day) => {
      const newPriceAdject: PriceAdjust = {
        day,
        multiplier: currentPriceMultiplier / 100,
        roomType: rooms[currentRoomIndex].name,
      };

      // update
      for (const price of prices) {
        const p = price.data() as PriceAdjust;
        if (p.day === day) {
          await setDoc(doc(firestore, "priceAdjust", price.id), newPriceAdject);
          return;
        }
      }
      await addDoc(priceCollection, newPriceAdject);
    });
  };
  return (
    <>
      <Head>
        <title>The Princess of Arena Cam Ranh Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="min-h-screen flex flex-col gap-4 mx-auto font-[Montserrat] bg-slate-700">
        <div className="tabs justify-center">
          {rooms?.map((_room, idx) => {
            const room = _room as Room;
            return (
              <button
                key={idx}
                onClick={() => {
                  setCurrentRoomIndex(idx);
                  setStartDate(new Date());
                  setEndDate(null);
                  setCurrentPriceMultipler(100);
                }}
                className={`tab tab-lifted ${
                  room.name === rooms[currentRoomIndex].name ? "tab-active" : ""
                }`}
              >
                {snakeToCamel(room.name)}
              </button>
            );
          })}
        </div>
        {rooms && (
          <div className="text-center grid grid-cols-2 grid-rows-2 gap-4">
            <div>Name: {snakeToCamel(rooms[currentRoomIndex].name)}</div>
            <div>Size: {rooms[currentRoomIndex].size} meter squared</div>
            <div>Quantity: {rooms[currentRoomIndex].quantity}</div>
            <div>Standard rate: ${rooms[currentRoomIndex].rate} per day</div>
          </div>
        )}
        <div className="flex justify-center items-center">
          <DatePicker
            dayClassName={(date) => "!w-[100px]"}
            weekDayClassName={(date) => "!w-[100px]"}
            renderDayContents={(dayOfMonths, date) => {
              let isSame: boolean = false;

              let multiplier = 1;
              let color = "black";
              const docs = priceDocs?.docs;
              if (docs) {
                for (let i = 0; i < docs.length; i++) {
                  const price = docs[i].data() as PriceAdjust;
                  const currentDay = dayjs(date);
                  const priceDay = dayjs(price.day, DATE_FORMAT);

                  isSame = currentDay.isSame(priceDay, "day");
                  if (isSame) {
                    multiplier = price.multiplier;
                    color = multiplierToColor(multiplier * 100);
                    break;
                  }
                }
              }

              return (
                <div
                  key={dayOfMonths}
                  className="rounded-md"
                  style={{
                    color,
                    fontWeight: isSame ? "bold" : "normal",
                  }}
                >
                  <span>{dayOfMonths}</span>: x{isSame ? multiplier : 1}
                </div>
              );
            }}
            onChange={(dates) => {
              const [start, end] = dates;
              setStartDate(start);
              setEndDate(end);
            }}
            selectsRange
            selected={startDate}
            startDate={startDate}
            endDate={endDate}
            inline
          />
        </div>
        <div className="mx-auto w-[600px] text-center text-red">
          <div className="flex justify-center">
            <div>Current Multiplier:</div>

            <div
              className="min-w-[50px]"
              style={{
                color: multiplierToColor(currentPriceMultiplier),
              }}
            >
              {currentPriceMultiplier / 100}
            </div>
          </div>
          <input
            onChange={(e) => {
              setCurrentPriceMultipler(Number.parseInt(e.currentTarget.value));
            }}
            type="range"
            min="50"
            max="500"
            value={currentPriceMultiplier}
            className="range"
          />
          <div>
            Affected period
            <div className="flex justify-evenly">
              <div>
                {
                  dayjs(startDate).format("DD / MM / YYYY") // '25/01/2019'
                }
              </div>
              <div>
                {
                  dayjs(endDate).format("DD / MM / YYYY") // '25/01/2019'
                }
              </div>
            </div>
          </div>
          <button onClick={adjustPrice} className="btn">
            Submit price change
          </button>
          <button onClick={clear} className="btn">
            Clear selected date
          </button>
          <button onClick={clearAll} className="btn">
            Clear all
          </button>
        </div>
      </main>
    </>
  );
};
// export type Room = {
//   id: string;
//   name: RoomType;
//   size: number; // in m2 unit
//   quantity: number;
//   rate: number;
//   photoList: string[];
//   utilityList: Utility[];
// };
export default Home;
