import type { NextPage } from "next";
import Head from "next/head";
import {
  addDoc,
  setDoc,
  doc,
  query,
  where,
  deleteDoc,
} from "firebase/firestore";
import { firestore, priceCollection, roomCollection } from "../shared/fb";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import {
  DATE_FORMAT,
  formatCurrency,
  getDayList,
  multiplierToColor,
  PriceAdjust,
  Room,
  snakeToCamel,
} from "../shared";
import dayjs from "dayjs";

import { useCollection } from "react-firebase-hooks/firestore";
import { useRef, useState } from "react";
import ArrowRight from "../components/Icons/ArrowRight";
import Loading from "../components/Icons/Loading";

const Home: NextPage = () => {
  const [rooms] = useCollection(roomCollection);
  const newRateInputRef = useRef<HTMLInputElement>(null);
  const [isUpdatingRate, setIsUpdatingRate] = useState(false);
  const [currentPriceMultiplier, setCurrentPriceMultipler] = useState(100); // 100%
  const [currentRoomIndex, setCurrentRoomIndex] = useState(0);

  const [successUpdateMultiplier, setSuccessUpdateMultiplier] = useState(false);
  const [successUpdateRate, setSuccessUpdateRate] = useState(false);

  const [priceDocs] = useCollection(
    query(
      priceCollection,
      where(
        "roomType",
        "==",
        rooms ? rooms.docs[currentRoomIndex].data().name : ""
      )
    )
  );

  const [startDate, setStartDate] = useState<Date | null>(new Date());
  const [endDate, setEndDate] = useState<Date | null>(new Date());

  const clearAll = () => {
    const prices = priceDocs?.docs ?? [];
    prices.forEach(async (price) => {
      await deleteDoc(doc(firestore, "priceAdjust", price.id));
    });
  };
  const clear = async () => {
    if (!startDate || !endDate || !rooms) {
      return;
    }
    const days: string[] = getDayList(startDate, endDate);
    const prices = priceDocs?.docs ?? [];
    days.forEach(async (day) => {
      for (const price of prices) {
        const p = price.data() as PriceAdjust;
        if (p.day === day) {
          await deleteDoc(doc(firestore, "priceAdjust", price.id));
          return;
        }
      }
    });
  };
  const adjustPrice = async () => {
    if (!rooms || !startDate || !endDate || currentPriceMultiplier === 1) {
      // show fail message
      return;
    }
    const days: string[] = getDayList(startDate, endDate);
    const prices = priceDocs?.docs ?? [];
    const currentRoom = rooms.docs[currentRoomIndex].data() as Room;
    days.forEach(async (day) => {
      const newPriceAdjust: PriceAdjust = {
        day,
        multiplier: currentPriceMultiplier / 100,
        roomType: currentRoom.name,
      };

      // update
      for (const price of prices) {
        const p = price.data() as PriceAdjust;
        if (p.day === day) {
          await setDoc(doc(firestore, "priceAdjust", price.id), newPriceAdjust);
          return;
        }
      }
      await addDoc(priceCollection, newPriceAdjust);
      localStorage.setItem(
        `${currentRoom.name}-${day}`,
        JSON.stringify(newPriceAdjust)
      );
    });
  };

  const updateRate = async () => {
    if (!rooms || !newRateInputRef) {
      return;
    }

    const currentDoc = rooms.docs[currentRoomIndex];
    if (!currentDoc) {
      return;
    }
    const id = currentDoc.id;
    const ref = doc(firestore, "rooms", id);
    if (!newRateInputRef.current?.value) {
      return;
    }
    setIsUpdatingRate(true);
    await setDoc(
      ref,
      {
        rate: Number.parseFloat(newRateInputRef.current.value),
      },
      { merge: true }
    );
    setIsUpdatingRate(false);
    newRateInputRef.current.value = "";
  };
  return (
    <>
      <Head>
        <title>The Princess of Arena Cam Ranh Home</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="min-h-screen flex flex-col gap-4 mx-auto font-[Montserrat] bg-slate-700 ">
        <div className="tabs justify-center">
          {rooms?.docs.map((_room, idx) => {
            const room = _room.data() as Room;
            return (
              <button
                key={idx}
                onClick={() => {
                  setCurrentRoomIndex(idx);
                  setStartDate(new Date());
                  setEndDate(null);
                  setCurrentPriceMultipler(100);
                }}
                className={`w-[70px] md:w-[150px] text-xs md:text-base tab tab-lifted ${
                  room.name === rooms.docs[currentRoomIndex].data().name
                    ? "tab-active"
                    : ""
                }`}
              >
                {snakeToCamel(room.name)}
              </button>
            );
          })}
        </div>
        <div className="flex grow flex-col justify-evenly">
          {rooms && (
            <div className="text-center mx-auto grid grid-cols-2 grid-rows-2 gap-4 max-w-[600px]">
              <div>
                Name: {snakeToCamel(rooms.docs[currentRoomIndex].data().name)}
              </div>
              <div>
                Size: {rooms.docs[currentRoomIndex].data().size} &#13217;
              </div>
              <div>
                Quantity: {rooms.docs[currentRoomIndex].data().quantity}
              </div>
              <div>
                Standard rate:{" "}
                <span className="text-green-400">
                  {formatCurrency(rooms.docs[currentRoomIndex].data().rate)}
                </span>{" "}
                / day
              </div>
            </div>
          )}
          <div className="flex justify-center">
            <input
              onChange={(e) => {
                const numericValue = e.currentTarget.value.replace(/[^\d]/, "");
                e.currentTarget.value = numericValue;
              }}
              ref={newRateInputRef}
              type="text"
              placeholder="Enter new rate"
              className="input max-w-xs"
              onKeyDown={(e) => {
                if (e.key.toLowerCase() === "enter") {
                  updateRate();
                }
              }}
            />
            <button
              onClick={updateRate}
              disabled={isUpdatingRate || !rooms}
              className="btn min-w-[120px]"
            >
              {isUpdatingRate ? <Loading /> : "Edit rate"}
            </button>
          </div>

          <div className="flex justify-center items-center max-w-full">
            <DatePicker
              dayClassName={(date) => "!w-[40px] md:!w-[100px]"}
              weekDayClassName={(date) => "!w-[40px] md:!w-[100px]"}
              renderDayContents={(dayOfMonths, date) => {
                let isSame: boolean = false;

                let multiplier = 1;
                let color = "black";
                const docs = priceDocs?.docs;
                if (docs) {
                  for (let i = 0; i < docs.length; i++) {
                    const price = docs[i].data() as PriceAdjust;
                    const currentDay = dayjs(date);
                    const priceDay = dayjs(price.day, DATE_FORMAT);

                    isSame = currentDay.isSame(priceDay, "day");
                    if (isSame) {
                      multiplier = price.multiplier;
                      color = multiplierToColor(multiplier * 100);
                      break;
                    }
                  }
                }

                return (
                  <div
                    key={dayOfMonths}
                    className="rounded-md"
                    style={{
                      color,
                      fontWeight: isSame ? "bold" : "normal",
                    }}
                  >
                    <span>{dayOfMonths}</span>: x{isSame ? multiplier : 1}
                  </div>
                );
              }}
              onChange={(dates) => {
                const [start, end] = dates;
                setStartDate(start);
                setEndDate(end);
              }}
              selectsRange
              selected={startDate}
              startDate={startDate}
              endDate={endDate}
              inline
            />
          </div>
          <div className="mx-auto max-w-[600px] text-center text-red">
            <div className="italic text-sm my-2">
              * The standard rate will be multiplier by this
            </div>
            <div className="flex justify-center mb-4">
              <div>Multiplier:</div>
              <div
                className="min-w-[50px]"
                style={{
                  color: multiplierToColor(currentPriceMultiplier),
                }}
              >
                {currentPriceMultiplier / 100}
              </div>
            </div>

            <input
              onChange={(e) => {
                setCurrentPriceMultipler(
                  Number.parseInt(e.currentTarget.value)
                );
              }}
              type="range"
              min="50"
              max="500"
              value={currentPriceMultiplier}
              className="range"
            />
            <div>
              Affected period
              <div className="flex justify-evenly my-4">
                <div>
                  {
                    dayjs(startDate).format("DD / MM / YYYY") // '25/01/2019'
                  }
                </div>
                <ArrowRight />
                <div>
                  {
                    dayjs(endDate).format("DD / MM / YYYY") // '25/01/2019'
                  }
                </div>
              </div>
            </div>
            <div className="flex justify-between mt-4">
              <button onClick={adjustPrice} className="btn btn-success">
                Submit price change
              </button>
              <div>
                <button onClick={clear} className="btn">
                  Clear
                </button>
                <button onClick={clearAll} className="btn btn-warning">
                  Clear all
                </button>
              </div>
            </div>
          </div>
        </div>
      </main>
    </>
  );
};
// export type Room = {
//   id: string;
//   name: RoomType;
//   size: number; // in m2 unit
//   quantity: number;
//   rate: number;
//   photoList: string[];
//   utilityList: Utility[];
// };
export default Home;
